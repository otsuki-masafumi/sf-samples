AWSTemplateFormatVersion: "2010-09-09"
Description: "An example template with an IAM role for a sample state machine : parallel"
Parameters:
  GlueS3Bucket:
    Type: String
    Default: aws-glue-scripts-m3d1pb
    Description: "Enter S3 bucket name for Glue scripts"
  GlueJobName1:
    Type: String
    Default: sm-parallel-gluejob1
  GlueJobName2:
    Type: String
    Default: sm-parallel-gluejob2
  GlueJobName3:
    Type: String
    Default: sm-parallel-gluejob3

Resources:
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
                - events.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:DescribeStateMachine"
                  - "states:StartExecution"
                  - "states:DeleteStateMachine"
                  - "states:ListExecutions"
                  - "states:UpdateStateMachine"
                  - "events:PutTargets"
                  - "events:PutRule"
                  - "events:DescribeRule"
                  - "glue:*"
                Resource: "*"
  StateMachineParent:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: sm-parallel1-Parent
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Example to invoke AWS Glue Job",
              "StartAt": "Preprocessing",
              "States": {
                "Preprocessing": {
                  "Comment": "Write prep if you need",
                  "Type": "Pass",
                  "Next": "Execute3ParallelJobs"
                },
                "Execute3ParallelJobs": {
                  "Type": "Parallel",
                  "Next": "Finished",
                  "Branches": [
                    {
                      "StartAt": "job1",
                      "States": {
                        "job1": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::states:startExecution.sync",
                          "Parameters": {
                            "StateMachineArn": "${StateMachine1}"
                            },
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "job2",
                      "States": {
                        "job2": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::states:startExecution.sync",
                          "Parameters": {
                            "StateMachineArn": "${StateMachine2}"
                            },
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "job3",
                      "States": {
                        "job3": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::states:startExecution.sync",
                          "Parameters": {
                            "StateMachineArn": "${StateMachine3}"
                            },
                          "End": true
                        }
                      }
                    }
                  ],
                  "Catch": [
                    {
                      "ErrorEquals": ["States.TaskFailed"],
                      "Next": "NotifyFailure",
                      "ResultPath": "$.cause"
                    }
                  ]
                },
                "Finished": {
                  "Type": "Succeed"
                },
                "NotifyFailure": {
                  "Comment": "Write here failure notification",
                  "Type": "Pass",
                  "Next": "ExecutionFailed"
                },
                "ExecutionFailed": {
                  "Type": "Fail",
                  "Cause": "Glue Job failed"
                }
              }
            }
          - {StateMachine1: !Ref StateMachineChild1,
             StateMachine2: !Ref StateMachineChild2,
             StateMachine3: !Ref StateMachineChild3}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
  StateMachineChild1:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: sm-parallel1-job1
      DefinitionString:
        !Sub 
          - |-
            {
              "Comment": "Example to execute AWS Glue Job",
              "StartAt": "Prep",
              "States": {
                "Prep": {
                  "Comment": "Write prep if you need",
                  "Type": "Pass",
                  "Next": "execGlueJob"
                },
                "execGlueJob": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::glue:startJobRun.sync",
                  "Parameters": {
                    "JobName": "${GlueJobName}"
                  },
                  "Next": "Finished",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.TaskFailed"],
                      "Next": "NotifyFailure",
                      "ResultPath": "$.cause"
                    }
                  ]
                },
                "Finished": {
                  "Type": "Succeed"
                },
                "NotifyFailure": {
                  "Comment": "ジョブの失敗通知を記述",
                  "Type": "Pass",
                  "Next": "ExecutionFailed"
                },
                "ExecutionFailed": {
                  "Type": "Fail",
                  "Cause" : "$.cause"
                }
              }
            }
          - {GlueJobName: !Ref GlueJobName1}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
  StateMachineChild2:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: sm-parallel1-job2
      DefinitionString:
        !Sub 
          - |-
            {
              "Comment": "Example to execute AWS Glue Job",
              "StartAt": "Prep",
              "States": {
                "Prep": {
                  "Comment": "Write prep if you need",
                  "Type": "Pass",
                  "Next": "execGlueJob"
                },
                "execGlueJob": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::glue:startJobRun.sync",
                  "Parameters": {
                    "JobName": "${GlueJobName}"
                  },
                  "Next": "Finished",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.TaskFailed"],
                      "Next": "NotifyFailure",
                      "ResultPath": "$.cause"
                    }
                  ]
                },
                "Finished": {
                  "Type": "Succeed"
                },
                "NotifyFailure": {
                  "Comment": "ジョブの失敗通知を記述",
                  "Type": "Pass",
                  "Next": "ExecutionFailed"
                },
                "ExecutionFailed": {
                  "Type": "Fail",
                  "Cause" : "$.cause"
                }
              }
            }
          - {GlueJobName: !Ref GlueJobName2}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
  StateMachineChild3:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: sm-parallel1-job3
      DefinitionString:
        !Sub 
          - |-
            {
              "Comment": "Example to execute AWS Glue Job",
              "StartAt": "Prep",
              "States": {
                "Prep": {
                  "Comment": "Write prep if you need",
                  "Type": "Pass",
                  "Next": "execGlueJob"
                },
                "execGlueJob": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::glue:startJobRun.sync",
                  "Parameters": {
                    "JobName": "${GlueJobName}"
                  },
                  "Next": "Finished",
                  "Catch": [
                    {
                      "ErrorEquals": ["States.TaskFailed"],
                      "Next": "NotifyFailure",
                      "ResultPath": "$.cause"
                    }
                  ]
                },
                "Finished": {
                  "Type": "Succeed"
                },
                "NotifyFailure": {
                  "Comment": "ジョブの失敗通知を記述",
                  "Type": "Pass",
                  "Next": "ExecutionFailed"
                },
                "ExecutionFailed": {
                  "Type": "Fail",
                  "Cause" : "$.cause"
                }
              }
            }
          - {GlueJobName: !Ref GlueJobName3}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
  GlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "GlueJobExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "glue:*"
                  - "s3:GetBucketLocation"
                  - "s3:ListBucket"
                  - "s3:ListAllMyBuckets"
                  - "s3:GetBucketAcl"
                  - "ec2:DescribeVpcEndpoints"
                  - "ec2:DescribeRouteTables"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeVpcAttribute"
                  - "iam:ListRolePolicies"
                  - "iam:GetRole"
                  - "iam:GetRolePolicy"
                  - "cloudwatch:PutMetricData"                
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:CreateBucket"
                Resource: "arn:aws:s3:::aws-glue-*"
              - Effect: "Allow"
                Action:
                  - "s3:CreateBucket"
                Resource: "arn:aws:s3:::aws-glue-*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Resource: 
                  - "arn:aws:s3:::aws-glue-*/*"
                  - "arn:aws:s3:::*/*aws-glue-*/*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: 
                  - "arn:aws:s3:::crawler-public*"
                  - "arn:aws:s3:::aws-glue-*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:AssociateKmsKey"                
                Resource: 
                  - "arn:aws:logs:*:*:/aws-glue/*"
              - Effect: "Allow"
                Action:
                  - "ec2:CreateTags"
                  - "ec2:DeleteTags"
                Condition:
                  ForAllValues:StringEquals:
                    aws:TagKeys:
                      - "aws-glue-service-resource"
                Resource: 
                  - "arn:aws:ec2:*:*:network-interface/*"
                  - "arn:aws:ec2:*:*:security-group/*"
                  - "arn:aws:ec2:*:*:instance/*"
  GlueJob1:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: pythonshell
        PythonVersion: 3
        ScriptLocation: 
          !Join [ '', ['s3://', !Ref GlueS3Bucket, '/scripts/glue_job1.py']]
      DefaultArguments:
        "--job-bookmark-option": "job-bookmark-disable"
      ExecutionProperty:
        MaxConcurrentRuns: 2
      GlueVersion: 1.0
      MaxRetries: 0
      MaxCapacity: 0.0625
      Name: !Ref GlueJobName1
      Role: !Ref GlueJobRole
  GlueJob2:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: pythonshell
        PythonVersion: 3
        ScriptLocation: 
          !Join [ '', ['s3://', !Ref GlueS3Bucket, '/scripts/glue_job2.py']]
      DefaultArguments:
        "--job-bookmark-option": "job-bookmark-disable"
      ExecutionProperty:
        MaxConcurrentRuns: 2
      GlueVersion: 1.0
      MaxRetries: 0
      MaxCapacity: 0.0625
      Name: !Ref GlueJobName2
      Role: !Ref GlueJobRole
  GlueJob3:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: pythonshell
        PythonVersion: 3
        ScriptLocation: 
          !Join [ '', ['s3://', !Ref GlueS3Bucket, '/scripts/glue_job3.py']]
      DefaultArguments:
        "--job-bookmark-option": "job-bookmark-disable"
      ExecutionProperty:
        MaxConcurrentRuns: 2
      GlueVersion: 1.0
      MaxRetries: 0
      MaxCapacity: 0.0625
      Name: !Ref GlueJobName3
      Role: !Ref GlueJobRole
