AWSTemplateFormatVersion: "2010-09-09"
Description: "An example template with an IAM role for a sample state machine : job flow."

Resources:
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:DescribeStateMachine"
                  - "states:StartExecution"
                  - "states:DeleteStateMachine"
                  - "states:ListExecutions"
                  - "states:UpdateStateMachine"
                  - "events:PutTargets"
                  - "events:PutRule"
                  - "events:DescribeRule"
                  - "lambda:InvokeFunction"
                  - "glue:StartJobRun"
                Resource: "*"
  ExecIfNotCompleted:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: "ExecIfNotCompleted"
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Example of job flow by state machines",
              "StartAt": "CheckExecStatus",
              "States": {
                "CheckExecStatus": {
                  "Type": "Task",
                  "Resource": "${LambdaFunctionArn}",
                  "InputPath": "$.lambda",
                  "ResultPath": "$.CheckResult",
                  "Next": "EvalStatus"
                },
                "EvalStatus": {
                  "Type": "Choice",
                  "InputPath": "$",
                  "Choices": [
                    { 
                      "Variable": "$.CheckResult.check_result",
                      "NumericEquals": 0,
                      "Next": "Execute"
                    },
                    {
                      "Variable": "$.CheckResult.check_result",
                      "NumericEquals": 1,
                      "Next": "AlreadyCompleted"
                    },
                    {
                      "Variable": "$.CheckResult.check_result",
                      "NumericEquals": 2,
                      "Next": "ExecutionFailed"
                    }
                  ],
                  "Default": "Execute"
                },
                "Execute": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::states:startExecution.sync",
                  "InputPath": "$.lambda",
                  "Parameters": {
                    "StateMachineArn.$": "$.sm_arn",
                    "Name.$": "$.execution_name"
                  },
                  "Catch": [
                    {
                      "ErrorEquals": ["States.TaskFailed"],
                      "Next": "ExecutionFailed",
                      "ResultPath": "$.cause"
                    }
                  ],
                  "Next": "Finished"
                },
                "AlreadyCompleted": {
                  "Type": "Pass",
                  "Next": "Finished"
                },
                "ExecutionFailed": {
                  "Type": "Fail",
                  "Cause": "Job Flow failed"
                },
                "Finished": {
                  "Type": "Succeed"
                }
              }
            }
          - {LambdaFunctionArn: !GetAtt [LambdaCheckStatus, Arn ]}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub lambda.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "states:ListExecutions"
                  - "lambda:InvokeFunction"
                Resource: "*"
  LambdaCheckStatus:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.check_exec_status
      FunctionName: state_machine_status_check
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Runtime: python3.7
      Code:
        ZipFile: |
          import boto3

          def check_exec_status(event, context):
              sm_arn = event['sm_arn']
              execution_name = event['execution_name']
              
              # 指定されたState MachineのExecution一覧（直近20件）を取得する
              sfn_client = boto3.client('stepfunctions')
              execution_list = sfn_client.list_executions(stateMachineArn=sm_arn, maxResults=20)

              # execution_nameを部分文字列として含むexecutionのみを取り出す
              target_execution = [x for x in execution_list['executions'] if execution_name in x['name']]

              # execution_nameが含まれるexecutionのステータスを取り出す
              status = [x['status'] for x in target_execution]

              # executionの状態によってチェック結果を反映する
              if len(status) == 0:
                  # まだ実行してないから実行する
                  check_status = 0
                  execution_status = "NOTEXIST"
              
              elif 'SUCCEEDED' in status:
                  # もう正常終了しているからスキップする
                  check_status = 1
                  execution_status = 'SUCCEEDED'
              else:
                  # それ以外の状態では実行できないので失敗させる
                  check_status = 2
                  execution_status = 'OTHER'
                  
              return {'check_result': check_status , "execution_status": execution_status}